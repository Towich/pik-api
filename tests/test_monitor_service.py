import pytest

from bot.models import Flat
from bot.repository import FlatRepository
from bot.services import MonitorService


@pytest.mark.asyncio
async def test_monitor_service_diff_and_db_state(tmp_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ diff –∏ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î."""

    import os

    os.environ.setdefault("telegram_token", "dummy")
    os.environ.setdefault("telegram_chat_id", "dummy")

    db_path = tmp_path / "test.db"

    repo = FlatRepository()
    repo._settings.database_path = str(db_path)
    await repo.init_db()

    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    old_flats = [
        Flat(id=1, rooms="studio", price=9_000_000, status="reserve", url=""),
        Flat(id=3, rooms="1", price=7_600_000, status="free", url=""),
    ]
    await repo.upsert_many(old_flats)

    service = MonitorService(repo)

    # –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: #1 –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, #2 –¥–æ–±–∞–≤–∏–ª–∞—Å—å, #3 –ø—Ä–æ–ø–∞–ª–∞
    new_flats = [
        Flat(id=1, rooms="studio", price=8_000_000, status="free", url=""),
        Flat(id=2, rooms="1", price=7_000_000, status="free", url=""),
    ]

    diff_text = await service.update_from_list(new_flats)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç—á—ë—Ç–µ –µ—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
    assert "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ #2" in diff_text
    assert "‚úèÔ∏è –ö–≤–∞—Ä—Ç–∏—Ä–∞ #1" in diff_text  # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    assert "‚ûñ –£–¥–∞–ª–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ #3" in diff_text

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å #1 –∏ #2, –Ω–æ –Ω–µ #3
    final_ids = {f.id for f in await repo.get_all_flats()}

    assert final_ids == {1, 2}


@pytest.mark.asyncio
async def test_stats_calculation(tmp_path):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""

    import os

    os.environ.setdefault("telegram_token", "dummy")
    os.environ.setdefault("telegram_chat_id", "dummy")

    db_path = tmp_path / "test.db"

    repo = FlatRepository()
    repo._settings.database_path = str(db_path)
    await repo.init_db()

    service = MonitorService(repo)

    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∫–≤–∞—Ä—Ç–∏—Ä –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    test_flats = [
        # –°—Ç—É–¥–∏–∏
        Flat(id=1, rooms="0", price=8_000_000, status="free", url=""),
        Flat(id=2, rooms="studio", price=8_500_000, status="free", url=""),
        Flat(id=3, rooms="—Å—Ç—É–¥–∏—è", price=9_000_000, status="reserve", url=""),
        # 1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ
        Flat(id=4, rooms="1", price=10_000_000, status="free", url=""),
        Flat(id=5, rooms="1", price=11_000_000, status="free", url=""),
        Flat(id=6, rooms="1", price=12_000_000, status="reserve", url=""),
        # 2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ (–Ω–µ –¥–æ–ª–∂–Ω—ã —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è)
        Flat(id=7, rooms="2", price=15_000_000, status="free", url=""),
        Flat(id=8, rooms="2", price=16_000_000, status="reserve", url=""),
    ]

    await repo.upsert_many(test_flats)

    stats_text = await service.stats_text()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
    assert "‚Ä¢ üè† –°—Ç—É–¥–∏–∏: <b>2</b> —Å–≤–æ–±–æ–¥–Ω–æ (–±—Ä–æ–Ω—å 1)" in stats_text
    assert "‚Ä¢ üö™ 1-–∫.: <b>2</b> —Å–≤–æ–±–æ–¥–Ω–æ (–±—Ä–æ–Ω—å 1)" in stats_text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ 2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    assert "2-–∫." not in stats_text 