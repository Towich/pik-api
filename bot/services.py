import logging
from typing import Dict, List, Tuple

from bot.models import Flat
from bot.pik_api_client import PIKApiClient
from bot.repository import FlatRepository

logger = logging.getLogger(__name__)


class MonitorService:
    """–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á—ë—Ç–∞."""

    def __init__(self, repo: FlatRepository):
        self._repo = repo

    # --------------------------- utils ---------------------------------

    @staticmethod
    def _is_studio(flat: Flat) -> bool:
        return str(flat.rooms) in {"0", "studio", "—Å—Ç—É–¥–∏—è"}

    @staticmethod
    def _is_one(flat: Flat) -> bool:
        return str(flat.rooms) == "1"

    @staticmethod
    def _price_fmt(price: int) -> str:
        return f"{price / 1_000_000:.2f} –º–ª–Ω"

    # -------------------------------------------------------------------

    def _build_stats_lines(self, flats: List[Flat], *, include_links: bool = False) -> List[str]:
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ç–æ–ø-3 —Ü–µ–Ω."""

        studio_free = sum(1 for f in flats if self._is_studio(f) and f.status == "free")
        studio_reserved = sum(1 for f in flats if self._is_studio(f) and f.status != "free")

        one_free = sum(1 for f in flats if self._is_one(f) and f.status == "free")
        one_reserved = sum(1 for f in flats if self._is_one(f) and f.status != "free")

        # –ë–µ—Ä—ë–º –æ–±—ä–µ–∫—Ç—ã, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        cheapest_studios = (
            sorted(
                (f for f in flats if self._is_studio(f) and f.status == "free"),
                key=lambda x: x.price,
            )[:3]
        )
        cheapest_ones = (
            sorted(
                (f for f in flats if self._is_one(f) and f.status == "free"),
                key=lambda x: x.price,
            )[:3]
        )

        number_emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£"]

        lines: List[str] = ["\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>"]
        lines.extend(
            [
                f"‚Ä¢ üè† –°—Ç—É–¥–∏–∏: <b>{studio_free}</b> —Å–≤–æ–±–æ–¥–Ω–æ (–±—Ä–æ–Ω—å {studio_reserved})",
                f"‚Ä¢ üö™ 1-–∫.: <b>{one_free}</b> —Å–≤–æ–±–æ–¥–Ω–æ (–±—Ä–æ–Ω—å {one_reserved})",
            ]
        )

        if cheapest_studios:
            lines.append("\nüí∏ <b>–¢–æ–ø-3 –¥–µ—à—ë–≤—ã—Ö —Å—Ç—É–¥–∏–π (—Å–≤–æ–±–æ–¥–Ω—ã–µ)</b>")
            for idx, flat in enumerate(cheapest_studios):
                price_part = (
                    f"<a href=\"{flat.url}\">{self._price_fmt(flat.price)}</a>"
                    if include_links and flat.url
                    else self._price_fmt(flat.price)
                )
                lines.append(f"{number_emojis[idx]} {price_part}")

        if cheapest_ones:
            lines.append("\nüí∏ <b>–¢–æ–ø-3 –¥–µ—à—ë–≤—ã—Ö 1-–∫. (—Å–≤–æ–±–æ–¥–Ω—ã–µ)</b>")
            for idx, flat in enumerate(cheapest_ones):
                price_part = (
                    f"<a href=\"{flat.url}\">{self._price_fmt(flat.price)}</a>"
                    if include_links and flat.url
                    else self._price_fmt(flat.price)
                )
                lines.append(f"{number_emojis[idx]} {price_part}")

        return lines

    async def stats_text(self, *, include_links: bool = False) -> str:
        """–ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥: –≤–µ—Ä–Ω—É—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –≤ –ë–î."""

        flats = await self._repo.get_all_flats()
        return "\n".join(self._build_stats_lines(flats, include_links=include_links))

    async def _process_flats(self, new_flats: List[Flat]) -> str:
        """–°—Ä–∞–≤–Ω–∏—Ç—å `new_flats` —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –ë–î –∏ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç—á—ë—Ç."""

        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ë–î –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        old_flats = await self._repo.get_all_flats()
        old_map: Dict[int, Flat] = {f.id: f for f in old_flats}
        new_map: Dict[int, Flat] = {f.id: f for f in new_flats}

        diff_lines: List[str] = []

        # --- –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã ----
        added_ids = new_map.keys() - old_map.keys()
        removed_ids = old_map.keys() - new_map.keys()

        for fid in sorted(added_ids):
            f = new_map[fid]
            apartment_link = f"<a href=\"{f.url}\">#{f.id}</a>" if f.url else f"#{f.id}"
            room_type = "—Å—Ç—É–¥–∏—è" if self._is_studio(f) else "1-–∫."
            diff_lines.append(
                f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ {apartment_link} ({room_type}): {self._price_fmt(f.price)}, —ç—Ç–∞–∂ {f.floor}, —Å—Ç–∞—Ç—É—Å {f.status}"
            )

        for fid in sorted(removed_ids):
            f = old_map[fid]
            apartment_link = f"<a href=\"{f.url}\">#{f.id}</a>" if f.url else f"#{f.id}"
            room_type = "—Å—Ç—É–¥–∏—è" if self._is_studio(f) else "1-–∫."
            diff_lines.append(
                f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ {apartment_link} ({room_type}): –±—ã–ª–∞ {self._price_fmt(f.price)}, —ç—Ç–∞–∂ {f.floor}, —Å—Ç–∞—Ç—É—Å {f.status}"
            )

        # --- —Ñ–∏–∑–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –∏–∑ –ë–î ----
        if removed_ids:
            await self._repo.delete_by_ids(list(removed_ids))

        # --- –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ----
        common_ids = new_map.keys() & old_map.keys()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—è –º–æ–¥–µ–ª–∏ Flat
        fields_to_check: Tuple[str, ...] = (
            "price",
            "status",
            "area",
            "floor",
            "rooms",
            "url",
            "location",
            "type_id",
            "guid",
            "bulk_id",
            "section_id",
            "sale_scheme_id",
            "ceiling_height",
            "is_pre_sale",
            "rooms_fact",
            "number",
            "number_bti",
            "number_stage",
            "min_month_fee",
            "discount",
            "has_advertising_price",
            "has_new_price",
            "area_bti",
            "area_project",
            "callback",
            "kitchen_furniture",
            "compass_angle",
            "is_resell",
        )
        for fid in sorted(common_ids):
            old = old_map[fid]
            new = new_map[fid]
            for field in fields_to_check:
                old_val = getattr(old, field)
                new_val = getattr(new, field)
                if old_val != new_val:
                    if field == "price":
                        old_val_fmt = self._price_fmt(old_val)
                        new_val_fmt = self._price_fmt(new_val)
                    else:
                        old_val_fmt = old_val
                        new_val_fmt = new_val
                    
                    # –°–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—É
                    apartment_link = f"<a href=\"{new.url}\">#{fid}</a>" if new.url else f"#{fid}"
                    room_type = "—Å—Ç—É–¥–∏—è" if self._is_studio(new) else "1-–∫."
                    diff_lines.append(
                        f"‚úèÔ∏è –ö–≤–∞—Ä—Ç–∏—Ä–∞ {apartment_link} ({room_type}): {field} {old_val_fmt} ‚Üí {new_val_fmt}"
                    )

        # --- –û–±–Ω–æ–≤–ª—è–µ–º –ë–î —Å–≤–µ–∂–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (insert/update)
        await self._repo.upsert_many(new_flats)

        # –ï—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç ‚Äì –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not diff_lines:
            return "üìù –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç"

        # –ò–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏
        summary_lines: List[str] = ["‚ö°Ô∏è <b>–ñ–ö ¬´–Ø—É–∑–∞ –ü–∞—Ä–∫¬ª</b>"]
        summary_lines.append("\nüìù <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>")
        summary_lines.extend(diff_lines)

        # –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Ç–æ–ø —Å —Å—Å—ã–ª–∫–∞–º–∏
        summary_lines.extend(self._build_stats_lines(new_flats, include_links=True))

        return "\n".join(summary_lines)

    # --------------------------- public API ----------------------------

    async def update_from_api(self) -> str:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å API, —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç diff, –æ–±–Ω–æ–≤–ª—è–µ—Ç –ë–î."""

        async with PIKApiClient() as client:
            all_flats = await client.fetch_flats()
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–∏–∏ –∏ 1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ
            new_flats = [f for f in all_flats if self._is_studio(f) or self._is_one(f)]
        return await self._process_flats(new_flats)

    async def update_from_list(self, flats: List[Flat]) -> str:
        """–¢–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä."""

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–∏–∏ –∏ 1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ
        filtered_flats = [f for f in flats if self._is_studio(f) or self._is_one(f)]
        return await self._process_flats(filtered_flats) 