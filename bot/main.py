import asyncio
import logging
from typing import Callable, Union
import json
import datetime

from loguru import logger
from telegram import Update, ReplyKeyboardMarkup, BotCommand
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
# –î–æ–±–∞–≤–∏–º ParseMode –¥–ª—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∏
from telegram.constants import ParseMode

from bot.config import get_settings
from bot.repository import FlatRepository
from bot.services import MonitorService
from bot.models import Flat

logging.basicConfig(level=logging.INFO)


# --------------------------- command handlers --------------------------


aSYNC_DEF = Callable[[Update, ContextTypes.DEFAULT_TYPE], None]


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ["–°—Ç—É–¥–∏–∏ üè†", "1-–∫. üö™"],
        ["–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", "–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å üîÑ"],
        ["Mock üõ†"],  # dev-–∫–Ω–æ–ø–∫–∞
    ]
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Å–ª–µ–∂—É –∑–∞ —Ü–µ–Ω–∞–º–∏ –≤ –ñ–ö ¬´–Ø—É–∑–∞ –ü–∞—Ä–∫¬ª. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.HTML,
    )


async def cmd_studios(update: Update, context: ContextTypes.DEFAULT_TYPE):
    repo: FlatRepository = context.application.bot_data["repo"]
    flats = await repo.select_cheapest(["0", "studio"], limit=10)
    if not flats:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    lines: list[str] = []
    for idx, flat in enumerate(flats):
        line = (
            f"#{idx + 1}: {flat.price / 1_000_000:.2f} –º–ª–Ω ¬∑ —ç—Ç–∞–∂ {flat.floor} ¬∑ {flat.url}"
        )
        # –°—Ç–∞—Ç—É—Å—ã –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç 'free' —Å—á–∏—Ç–∞–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –∑–∞—á—ë—Ä–∫–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
        if flat.status != "free":
            line = f"<s>{line}</s>"
        lines.append(line)

    await update.message.reply_text(
        "–°–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ —Å—Ç—É–¥–∏–∏:\n" + "\n".join(lines), parse_mode=ParseMode.HTML
    )


async def cmd_one(update: Update, context: ContextTypes.DEFAULT_TYPE):
    repo: FlatRepository = context.application.bot_data["repo"]
    flats = await repo.select_cheapest(["1"], limit=10)
    if not flats:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    lines: list[str] = []
    for idx, flat in enumerate(flats):
        line = (
            f"#{idx + 1}: {flat.price / 1_000_000:.2f} –º–ª–Ω ¬∑ —ç—Ç–∞–∂ {flat.floor} ¬∑ {flat.url}"
        )
        if flat.status != "free":
            line = f"<s>{line}</s>"
        lines.append(line)

    await update.message.reply_text(
        "–°–∞–º—ã–µ –¥–µ—à—ë–≤—ã–µ 1-–∫.:\n" + "\n".join(lines), parse_mode=ParseMode.HTML
    )


async def cmd_mockupdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–º–æ–∫–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    MOCK_FILE_PATH = "mock_data.json"
    try:
        with open(MOCK_FILE_PATH, "r", encoding="utf-8") as f:
            raw_data = json.load(f)
    except FileNotFoundError:
        await update.message.reply_text(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª {MOCK_FILE_PATH}. –ü–æ–ª–æ–∂–∏—Ç–µ mock JSON —Ä—è–¥–æ–º —Å –±–æ—Ç–æ–º."
        )
        return
    except json.JSONDecodeError:
        await update.message.reply_text(
            f"–§–∞–π–ª {MOCK_FILE_PATH} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON."
        )
        return

    # raw_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º –∫–≤–∞—Ä—Ç–∏—Ä –∫–∞–∫ –∏–∑ API
    if not isinstance(raw_data, list):
        await update.message.reply_text(
            "–û–∂–∏–¥–∞–ª—Å—è JSON-–º–∞—Å—Å–∏–≤ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –∫–≤–∞—Ä—Ç–∏—Ä, –∫–∞–∫ –≤ –æ—Ç–≤–µ—Ç–µ v1/flat."
        )
        return

    flats: list[Flat] = []
    for item in raw_data:
        if not isinstance(item, dict):
            continue
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –º–∞–ø–ø–∏–Ω–≥-–ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ PIKApiClient
        flats.append(
            Flat(
                id=item.get("id"),
                rooms=str(item.get("rooms")),
                price=item.get("price", 0),
                status=item.get("status", "unknown"),
                url=item.get("url", ""),
                area=item.get("area"),
                floor=item.get("floor"),
                # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                location=item.get("location"),
                type_id=item.get("type_id"),
                guid=item.get("guid"),
                bulk_id=item.get("bulk_id"),
                section_id=item.get("section_id"),
                sale_scheme_id=item.get("saleSchemeId"),
                ceiling_height=item.get("ceilingHeight"),
                is_pre_sale=item.get("isPreSale"),
                rooms_fact=item.get("rooms_fact"),
                number=item.get("number"),
                number_bti=item.get("number_bti"),
                number_stage=item.get("number_stage"),
                min_month_fee=item.get("minMonthFee"),
                discount=item.get("discount"),
                has_advertising_price=item.get("has_advertising_price"),
                has_new_price=item.get("hasNewPrice"),
                area_bti=item.get("area_bti"),
                area_project=item.get("area_project"),
                callback=item.get("callback"),
                kitchen_furniture=item.get("kitchenFurniture"),
                booking_cost=item.get("bookingCost"),
                compass_angle=item.get("compass_angle"),
                booking_status=item.get("bookingStatus"),
                pdf=item.get("pdf"),
                is_resell=item.get("isResell"),
            )
        )

    monitor: MonitorService = context.application.bot_data["monitor"]
    summary = await monitor.update_from_list(flats)
    await _send_long_text(context.bot, update.effective_chat.id, summary)


async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    repo: FlatRepository = context.application.bot_data["repo"]  # —Ç–æ–ª—å–∫–æ —á—Ç–æ–±—ã TypeChecker –Ω–µ —Ä—É–≥–∞–ª—Å—è
    monitor: MonitorService = context.application.bot_data["monitor"]

    stats = await monitor.stats_text(include_links=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    next_update_time = _get_next_update_time(context)
    stats += f"\n\n‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {next_update_time}"
    
    await _send_long_text(context.bot, update.effective_chat.id, stats)


# --------------------------- jobs --------------------------------------


TELEGRAM_LIMIT = 4096

async def _send_long_text(bot, chat_id: Union[str, int], text: str) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç Telegram."""
    if len(text) <= TELEGRAM_LIMIT:
        await bot.send_message(chat_id=chat_id, text=text, parse_mode=ParseMode.HTML)
        return

    chunk: list[str] = []
    current_len = 0
    for line in text.split("\n"):
        # +1 —É—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∏ —Å–∫–ª–µ–π–∫–µ
        if current_len + len(line) + 1 > TELEGRAM_LIMIT:
            await bot.send_message(chat_id=chat_id, text="\n".join(chunk), parse_mode=ParseMode.HTML)
            chunk = [line]
            current_len = len(line) + 1
        else:
            chunk.append(line)
            current_len += len(line) + 1

    if chunk:
        await bot.send_message(chat_id=chat_id, text="\n".join(chunk), parse_mode=ParseMode.HTML)


def _get_next_update_time(context: ContextTypes.DEFAULT_TYPE) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    settings = get_settings()
    current_jobs = context.job_queue.get_jobs_by_name("hourly_update")
    
    if current_jobs:
        next_run = current_jobs[0].next_t
        if next_run:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
            moscow_time = next_run + datetime.timedelta(hours=3)
            return moscow_time.strftime("%H:%M")
    
    return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"


async def cmd_update_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –æ—Ç–º–µ–Ω–æ–π –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    monitor: MonitorService = context.application.bot_data["monitor"]
    settings = get_settings()
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    current_jobs = context.job_queue.get_jobs_by_name("hourly_update")
    for job in current_jobs:
        job.schedule_removal()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    summary = await monitor.update_from_api()
    
    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    context.job_queue.run_repeating(
        hourly_job,
        interval=settings.summary_interval_seconds,
        first=settings.summary_interval_seconds,
        data={"monitor": monitor},
        name="hourly_update"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    next_update_time = _get_next_update_time(context)
    summary += f"\n\nüîÑ <b>–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b>\n‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {next_update_time}"
    
    await _send_long_text(context.bot, update.effective_chat.id, summary)


async def hourly_job(context: ContextTypes.DEFAULT_TYPE):
    monitor: MonitorService = context.job.data["monitor"]
    settings = get_settings()
    summary = await monitor.update_from_api()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    next_update_time = _get_next_update_time(context)
    summary += f"\n\n‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {next_update_time}"
    
    await _send_long_text(context.bot, settings.telegram_chat_id, summary)


# --------------------------- main --------------------------------------


def main() -> None:
    # –°–æ–∑–¥–∞—ë–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã ApplicationBuilder –º–æ–≥ –µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    settings = get_settings()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –≤ —ç—Ç–æ–º –∂–µ loop
    repo = FlatRepository()
    loop.run_until_complete(repo.init_db())

    monitor = MonitorService(repo)

    app = Application.builder().token(settings.telegram_token).build()

    # –∑–∞–¥–∞—ë–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —ç–º–æ–¥–∑–∏
    commands = [
        BotCommand("start", "‚ÑπÔ∏è –ø–æ–º–æ—â—å"),
        BotCommand("studios", "üè† 10 –¥–µ—à—ë–≤—ã—Ö —Å—Ç—É–¥–∏–π"),
        BotCommand("one", "üö™ 10 –¥–µ—à—ë–≤—ã—Ö 1-–∫."),
        BotCommand("stats", "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("update", "üîÑ –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å"),
        BotCommand("mock", "üõ† mock-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (dev)"),
    ]
    loop.run_until_complete(app.bot.set_my_commands(commands))

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º repo –∏ monitor –¥–ª—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    app.bot_data["repo"] = repo
    app.bot_data["monitor"] = monitor

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("studios", cmd_studios))
    app.add_handler(CommandHandler("one", cmd_one))
    app.add_handler(CommandHandler("mock", cmd_mockupdate))
    app.add_handler(CommandHandler("stats", cmd_stats))
    app.add_handler(CommandHandler("update", cmd_update_now))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (—Ç–µ–∫—Å—Ç—ã –±–µ–∑ —Å–ª–µ—à–∞)
    button_map = {
        "–°—Ç—É–¥–∏–∏ üè†": cmd_studios,
        "1-–∫. üö™": cmd_one,
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä": cmd_stats,
        "–û–±–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å üîÑ": cmd_update_now,
        "Mock üõ†": cmd_mockupdate,
    }

    for text, handler in button_map.items():
        app.add_handler(MessageHandler(filters.Regex(f"^{text}$"), handler))

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    app.job_queue.run_repeating(
        hourly_job,
        interval=settings.summary_interval_seconds,
        # first=settings.summary_interval_seconds,
        first=5,
        data={"monitor": monitor},
        name="hourly_update"
    )

    logger.info("Bot started. Press Ctrl+C to stop.")
    app.run_polling()


if __name__ == "__main__":
    main() 